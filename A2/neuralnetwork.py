{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A2.5 Multilayer Neural Networks for Nonlinear Regression\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sebastian Infantes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment you will \n",
    "* make some modifications to the supplied neural network implementation, \n",
    "* define a function that partitions data into training, validation and test sets,\n",
    "* apply it to a data set, \n",
    "* define a function that runs experiments with a variety of parameter values, \n",
    "* describe your observations of these results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimizers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we need a class that includes our optimization algorithms, `sgd` and `adam`.  The following code cell implements `sgd`.  You must complete the implementation of `adam`, following its implementation in the lecture notes.\n",
    "\n",
    "Notice that `all_weights` is updated in place by these optimization algorithms.  The new values of `all_weights` are not returned from these functions, because the code that calls these functions allocates the memory for `all_weights` and keeps the reference to it so has direct access to the new values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Optimizers():\n",
    "\n",
    "    def __init__(self, all_weights):\n",
    "        '''all_weights is a vector of all of a neural networks weights concatenated into a one-dimensional vector'''\n",
    "        \n",
    "        self.all_weights = all_weights\n",
    "\n",
    "        # The following initializations are only used by adam.\n",
    "        # Only initializing mt, vt, beta1t and beta2t here allows multiple calls to adam to handle training\n",
    "        # with multiple subsets (batches) of training data.\n",
    "        self.mt = np.zeros_like(all_weights)\n",
    "        self.vt = np.zeros_like(all_weights)\n",
    "        self.beta1 = 0.9\n",
    "        self.beta2 = 0.999\n",
    "        self.beta1t = 1  # was self.beta1\n",
    "        self.beta2t = 1  # was self.beta2\n",
    "\n",
    "        \n",
    "    def sgd(self, error_f, gradient_f, fargs=[], n_epochs=100, learning_rate=0.001, error_convert_f=None):\n",
    "        '''\n",
    "error_f: function that requires X and T as arguments (given in fargs) and returns mean squared error.\n",
    "gradient_f: function that requires X and T as arguments (in fargs) and returns gradient of mean squared error\n",
    "            with respect to each weight.\n",
    "error_convert_f: function that converts the standardized error from error_f to original T units.\n",
    "        '''\n",
    "\n",
    "        error_trace = []\n",
    "        epochs_per_print = n_epochs // 10\n",
    "\n",
    "        for epoch in range(n_epochs):\n",
    "\n",
    "            error = error_f(*fargs)\n",
    "            grad = gradient_f(*fargs)\n",
    "\n",
    "            # Update all weights using -= to modify their values in-place.\n",
    "            self.all_weights -= learning_rate * grad\n",
    "\n",
    "            if error_convert_f:\n",
    "                error = error_convert_f(error)\n",
    "            error_trace.append(error)\n",
    "\n",
    "            if (epoch + 1) % max(1, epochs_per_print) == 0:\n",
    "                print(f'sgd: Epoch {epoch+1:d} Error={error:.5f}')\n",
    "\n",
    "        return error_trace\n",
    "\n",
    "    def adam(self, error_f, gradient_f, fargs=[], n_epochs=100, learning_rate=0.001, error_convert_f=None):\n",
    "        '''\n",
    "error_f: function that requires X and T as arguments (given in fargs) and returns mean squared error.\n",
    "gradient_f: function that requires X and T as arguments (in fargs) and returns gradient of mean squared error\n",
    "            with respect to each weight.\n",
    "error_convert_f: function that converts the standardized error from error_f to original T units.\n",
    "        '''\n",
    "        \n",
    "        # adam = Adaptive Moment Estimation\n",
    "\n",
    "        alpha = learning_rate  # learning rate called alpha in original paper on adam\n",
    "        epsilon = 1e-8\n",
    "        error_trace = []\n",
    "        epochs_per_print = n_epochs // 10\n",
    "\n",
    "        for epoch in range(n_epochs):\n",
    "\n",
    "            error = error_f(*fargs)\n",
    "            grad = gradient_f(*fargs)\n",
    "\n",
    "            # Finish Adam implementation here by updating\n",
    "            #   self.mt\n",
    "            #   self.vt\n",
    "            #   self.beta1t\n",
    "            #   self.beta2t\n",
    "            # and updating values of self.all_weights\n",
    "            \n",
    "            # mt = beta1 * mt + (1 - beta1) * gradE_W\n",
    "            gradE_W = learning_rate * grad\n",
    "            self.mt = self.beta1 * self.mt + (1 - self.beta1) * (gradE_W)\n",
    "            \n",
    "            # vt = beta2 * vt + (1 - beta2) * np.square(gradE_W)\n",
    "            self.vt = self.beta2 * self.vt + (1 - self.beta2) * np.square(gradE_W)\n",
    "            \n",
    "            # beta1t *= beta1\n",
    "            self.beta1t *= self.beta1\n",
    "            \n",
    "            # beta2t *= beta2\n",
    "            self.beta2t *= self.beta2\n",
    "            \n",
    "            # mhat = mt / (1 - beta1)\n",
    "            mhat = self.mt / (1 - self.beta1t)\n",
    "            \n",
    "            # vhat = vt / (1 - beta2)\n",
    "            vhat = self.vt / (1 - self.beta2t)\n",
    "            \n",
    "            # w -= rho * mhat / (np.sqrt(vhat) + epsilon)\n",
    "            # rho = learning rate?\n",
    "            self.all_weights -= learning_rate * mhat / (np.sqrt(vhat) + epsilon)\n",
    "        \n",
    "\n",
    "            if error_convert_f:\n",
    "                error = error_convert_f(error)\n",
    "            error_trace.append(error)\n",
    "\n",
    "            if (epoch + 1) % max(1, epochs_per_print) == 0:\n",
    "                print(f'Adam: Epoch {epoch+1:d} Error={error:.5f}')\n",
    "\n",
    "        return error_trace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test `Optimizers` using the function `test_optimizers`.  You should get the same results shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_optimizers():\n",
    "\n",
    "    def parabola(wmin):\n",
    "        return ((w - wmin) ** 2)[0]\n",
    "\n",
    "    def parabola_gradient(wmin):\n",
    "        return 2 * (w - wmin)\n",
    "\n",
    "    w = np.array([0.0])\n",
    "    optimizer = Optimizers(w)\n",
    "\n",
    "    wmin = 5\n",
    "    optimizer.sgd(parabola, parabola_gradient, [wmin], n_epochs=100, learning_rate=0.1)\n",
    "    print(f'sgd: Minimum of parabola is at {wmin}. Value found is {w}')\n",
    "\n",
    "    w = np.array([0.0])\n",
    "    optimizer = Optimizers(w)\n",
    "    optimizer.adam(parabola, parabola_gradient, [wmin], n_epochs=100, learning_rate=0.1)\n",
    "    print(f'adam: Minimum of parabola is at {wmin}. Value found is {w}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sgd: Epoch 10 Error=0.45036\n",
      "sgd: Epoch 20 Error=0.00519\n",
      "sgd: Epoch 30 Error=0.00006\n",
      "sgd: Epoch 40 Error=0.00000\n",
      "sgd: Epoch 50 Error=0.00000\n",
      "sgd: Epoch 60 Error=0.00000\n",
      "sgd: Epoch 70 Error=0.00000\n",
      "sgd: Epoch 80 Error=0.00000\n",
      "sgd: Epoch 90 Error=0.00000\n",
      "sgd: Epoch 100 Error=0.00000\n",
      "sgd: Minimum of parabola is at 5. Value found is [5.]\n",
      "Adam: Epoch 10 Error=16.85565\n",
      "Adam: Epoch 20 Error=9.93336\n",
      "Adam: Epoch 30 Error=5.21627\n",
      "Adam: Epoch 40 Error=2.37740\n",
      "Adam: Epoch 50 Error=0.90515\n",
      "Adam: Epoch 60 Error=0.26972\n",
      "Adam: Epoch 70 Error=0.05453\n",
      "Adam: Epoch 80 Error=0.00453\n",
      "Adam: Epoch 90 Error=0.00016\n",
      "Adam: Epoch 100 Error=0.00147\n",
      "adam: Minimum of parabola is at 5. Value found is [5.03900403]\n"
     ]
    }
   ],
   "source": [
    "test_optimizers()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NeuralNetwork class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can implement the `NeuralNetwork` class that calls the above `Optimizers` functions to update the weights.\n",
    "\n",
    "You must first complete the `use` function.  You can make use of the `forward_pass` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class NeuralNetwork():\n",
    "\n",
    "\n",
    "    def __init__(self, n_inputs, n_hiddens_per_layer, n_outputs):\n",
    "        self.n_inputs = n_inputs\n",
    "        self.n_outputs = n_outputs\n",
    "\n",
    "        # Set self.n_hiddens_per_layer to [] if argument is 0, [], or [0]\n",
    "        if n_hiddens_per_layer == 0 or n_hiddens_per_layer == [] or n_hiddens_per_layer == [0]:\n",
    "            self.n_hiddens_per_layer = []\n",
    "        else:\n",
    "            self.n_hiddens_per_layer = n_hiddens_per_layer\n",
    "\n",
    "        # Initialize weights, by first building list of all weight matrix shapes.\n",
    "        n_in = n_inputs\n",
    "        shapes = []\n",
    "        for nh in self.n_hiddens_per_layer:\n",
    "            shapes.append((n_in + 1, nh))\n",
    "            n_in = nh\n",
    "        shapes.append((n_in + 1, n_outputs))\n",
    "\n",
    "        # self.all_weights:  vector of all weights\n",
    "        # self.Ws: list of weight matrices by layer\n",
    "        self.all_weights, self.Ws = self.make_weights_and_views(shapes)\n",
    "\n",
    "        # Define arrays to hold gradient values.\n",
    "        # One array for each W array with same shape.\n",
    "        self.all_gradients, self.dE_dWs = self.make_weights_and_views(shapes)\n",
    "\n",
    "        self.trained = False\n",
    "        self.total_epochs = 0\n",
    "        self.error_trace = []\n",
    "        self.Xmeans = None\n",
    "        self.Xstds = None\n",
    "        self.Tmeans = None\n",
    "        self.Tstds = None\n",
    "\n",
    "\n",
    "    def make_weights_and_views(self, shapes):\n",
    "        # vector of all weights built by horizontally stacking flatenned matrices\n",
    "        # for each layer initialized with uniformly-distributed values.\n",
    "        all_weights = np.hstack([np.random.uniform(size=shape).flat / np.sqrt(shape[0])\n",
    "                                 for shape in shapes])\n",
    "        # Build list of views by reshaping corresponding elements from vector of all weights\n",
    "        # into correct shape for each layer.\n",
    "        views = []\n",
    "        start = 0\n",
    "        for shape in shapes:\n",
    "            size =shape[0] * shape[1]\n",
    "            views.append(all_weights[start:start + size].reshape(shape))\n",
    "            start += size\n",
    "        return all_weights, views\n",
    "\n",
    "\n",
    "    # Return string that shows how the constructor was called\n",
    "    def __repr__(self):\n",
    "        return f'NeuralNetwork({self.n_inputs}, {self.n_hiddens_per_layer}, {self.n_outputs})'\n",
    "\n",
    "\n",
    "    # Return string that is more informative to the user about the state of this neural network.\n",
    "    def __str__(self):\n",
    "        if self.trained:\n",
    "            return self.__repr__() + f' trained for {self.total_epochs} epochs, final training error {self.error_trace[-1]}'\n",
    "\n",
    "\n",
    "    def train(self, X, T, n_epochs, learning_rate, method='sgd'):\n",
    "        '''\n",
    "train: \n",
    "  X: n_samples x n_inputs matrix of input samples, one per row\n",
    "  T: n_samples x n_outputs matrix of target output values, one sample per row\n",
    "  n_epochs: number of passes to take through all samples updating weights each pass\n",
    "  learning_rate: factor controlling the step size of each update\n",
    "  method: is either 'sgd' or 'adam'\n",
    "        '''\n",
    "\n",
    "        # Setup standardization parameters\n",
    "        if self.Xmeans is None:\n",
    "            self.Xmeans = X.mean(axis=0)\n",
    "            self.Xstds = X.std(axis=0)\n",
    "            self.Xstds[self.Xstds == 0] = 1  # So we don't divide by zero when standardizing\n",
    "            self.Tmeans = T.mean(axis=0)\n",
    "            self.Tstds = T.std(axis=0)\n",
    "            \n",
    "        # Standardize X and T\n",
    "        X = (X - self.Xmeans) / self.Xstds\n",
    "        T = (T - self.Tmeans) / self.Tstds\n",
    "\n",
    "        # Instantiate Optimizers object by giving it vector of all weights\n",
    "        optimizer = Optimizers(self.all_weights)\n",
    "\n",
    "        # Define function to convert value from error_f into error in original T units.\n",
    "        error_convert_f = lambda err: (np.sqrt(err) * self.Tstds)[0] # to scalar\n",
    "\n",
    "        if method == 'sgd':\n",
    "\n",
    "            error_trace = optimizer.sgd(self.error_f, self.gradient_f,\n",
    "                                        fargs=[X, T], n_epochs=n_epochs,\n",
    "                                        learning_rate=learning_rate,\n",
    "                                        error_convert_f=error_convert_f)\n",
    "\n",
    "        elif method == 'adam':\n",
    "\n",
    "            error_trace = optimizer.adam(self.error_f, self.gradient_f,\n",
    "                                         fargs=[X, T], n_epochs=n_epochs,\n",
    "                                         learning_rate=learning_rate,\n",
    "                                         error_convert_f=error_convert_f)\n",
    "\n",
    "        else:\n",
    "            raise Exception(\"method must be 'sgd' or 'adam'\")\n",
    "        \n",
    "        self.error_trace = error_trace\n",
    "\n",
    "        # Return neural network object to allow applying other methods after training.\n",
    "        #  Example:    Y = nnet.train(X, T, 100, 0.01).use(X)\n",
    "        return self\n",
    "\n",
    "   \n",
    "    def forward_pass(self, X):\n",
    "        '''X assumed already standardized. Output returned as standardized.'''\n",
    "        self.Ys = [X]\n",
    "        for W in self.Ws[:-1]:\n",
    "            self.Ys.append(np.tanh(self.Ys[-1] @ W[1:, :] + W[0:1, :]))\n",
    "        last_W = self.Ws[-1]\n",
    "        self.Ys.append(self.Ys[-1] @ last_W[1:, :] + last_W[0:1, :])\n",
    "        return self.Ys\n",
    "\n",
    "    # Function to be minimized by optimizer method, mean squared error\n",
    "    def error_f(self, X, T):\n",
    "        Ys = self.forward_pass(X)\n",
    "        mean_sq_error = np.mean((T - Ys[-1]) ** 2)\n",
    "        return mean_sq_error\n",
    "\n",
    "    # Gradient of function to be minimized for use by optimizer method\n",
    "    def gradient_f(self, X, T):\n",
    "        '''Assumes forward_pass just called with layer outputs in self.Ys.'''\n",
    "        error = T - self.Ys[-1]\n",
    "        n_samples = X.shape[0]\n",
    "        n_outputs = T.shape[1]\n",
    "        delta = - error / (n_samples * n_outputs)\n",
    "        n_layers = len(self.n_hiddens_per_layer) + 1\n",
    "        # Step backwards through the layers to back-propagate the error (delta)\n",
    "        for layeri in range(n_layers - 1, -1, -1):\n",
    "            # gradient of all but bias weights\n",
    "            self.dE_dWs[layeri][1:, :] = self.Ys[layeri].T @ delta\n",
    "            # gradient of just the bias weights\n",
    "            self.dE_dWs[layeri][0:1, :] = np.sum(delta, 0)\n",
    "            # Back-propagate this layer's delta to previous layer\n",
    "            delta = delta @ self.Ws[layeri][1:, :].T * (1 - self.Ys[layeri] ** 2)\n",
    "        return self.all_gradients\n",
    "\n",
    "    def use(self, X):\n",
    "        '''X assumed to not be standardized. Return the unstandardized prediction'''\n",
    "        # Standardize X using Xmeans and Xstds in model\n",
    "        X = (X - self.Xmeans) / self.Xstds\n",
    "        \n",
    "        '''\n",
    "        #print(len(self.all_weights), len(X), len(self.Ws))\n",
    "        # Predict output values using weights in model\n",
    "        #X = np.insert(X,0,1,axis=1)\n",
    "        # predict = X1 @ model['w']\n",
    "        #predict = X @ self.Ws\n",
    "        # Unstandardize the predicted output values using Tmeans and Tstds in model\n",
    "        #Y = predict * self.Tstds + self.Tmeans\n",
    "        # Return the unstandardized output values\n",
    "        #return Y\n",
    "        '''\n",
    "        Y = self.forward_pass(X)\n",
    "        T = Y[-1] * self.Tstds + self.Tmeans\n",
    "\n",
    "        # Y[1:]\n",
    "        return T\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then test it with the `test_neuralnetwork` function.  Your results should be the same as those shown, because the pseudo-random number generator used to initialize the weights is set to start with the same seed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.02509198,  0.09014286],\n",
       "       [ 0.04639879,  0.0197317 ]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.seed(42)\n",
    "np.random.uniform(-0.1, 0.1, size=(2, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.06879627, -0.0688011 ],\n",
       "       [-0.08838328,  0.07323523]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.uniform(-0.1, 0.1, size=(2, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.02509198,  0.09014286],\n",
       "       [ 0.04639879,  0.0197317 ]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.seed(42)\n",
    "np.random.uniform(-0.1, 0.1, size=(2, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_neuralnetwork():\n",
    "    \n",
    "    np.random.seed(42)\n",
    "    \n",
    "    X = np.arange(100).reshape((-1, 1))\n",
    "    T = np.sin(X * 0.04)\n",
    "\n",
    "    n_hiddens = [10, 10]\n",
    "    n_epochs = 2000\n",
    "    learning_rate = 0.01\n",
    "    \n",
    "    nnetsgd = NeuralNetwork(1, n_hiddens, 1)\n",
    "    nnetsgd.train(X, T, n_epochs, learning_rate, method='sgd')\n",
    "\n",
    "    print()  # skip a line\n",
    "    \n",
    "    nnetadam = NeuralNetwork(1, n_hiddens, 1)\n",
    "    nnetadam.train(X, T, n_epochs, learning_rate, method='adam')\n",
    "\n",
    "    Ysgd = nnetsgd.use(X)\n",
    "    Yadam = nnetadam.use(X)\n",
    "\n",
    "    plt.figure(figsize=(15,10))\n",
    "    plt.subplot(1, 3, 1)\n",
    "    plt.plot(nnetsgd.error_trace, label='SGD')\n",
    "    plt.plot(nnetadam.error_trace, label='Adam')\n",
    "    plt.xlabel('Epoch')\n",
    "    plt.ylabel('RMSE')\n",
    "    plt.legend()\n",
    "    \n",
    "    plt.subplot(1, 3, 2)\n",
    "    plt.plot(T, Ysgd, 'o', label='SGD')\n",
    "    plt.plot(T, Yadam, 'o', label='Adam')\n",
    "    a = min(np.min(T), np.min(Ysgd))\n",
    "    b = max(np.max(T), np.max(Ysgd))\n",
    "    plt.plot([a, b], [a, b], 'k-', lw=3, alpha=0.5, label='45 degree')\n",
    "    plt.xlabel('Target')\n",
    "    plt.ylabel('Predicted')\n",
    "    plt.legend()\n",
    "\n",
    "    plt.subplot(1, 3, 3)\n",
    "    plt.plot(Ysgd, 'o-', label='SGD')\n",
    "    plt.plot(Yadam, 'o-', label='Adam')\n",
    "    plt.plot(T, label='Target')\n",
    "    plt.xlabel('Sample')\n",
    "    plt.ylabel('Target or Predicted')\n",
    "    plt.legend()\n",
    "\n",
    "    plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sgd: Epoch 200 Error=0.49330\n",
      "sgd: Epoch 400 Error=0.46833\n",
      "sgd: Epoch 600 Error=0.44525\n",
      "sgd: Epoch 800 Error=0.42264\n",
      "sgd: Epoch 1000 Error=0.39428\n",
      "sgd: Epoch 1200 Error=0.35526\n",
      "sgd: Epoch 1400 Error=0.30300\n",
      "sgd: Epoch 1600 Error=0.24079\n",
      "sgd: Epoch 1800 Error=0.18020\n",
      "sgd: Epoch 2000 Error=0.13423\n",
      "\n",
      "Adam: Epoch 200 Error=0.11620\n",
      "Adam: Epoch 400 Error=0.00795\n",
      "Adam: Epoch 600 Error=0.00362\n",
      "Adam: Epoch 800 Error=0.00268\n",
      "Adam: Epoch 1000 Error=0.00236\n",
      "Adam: Epoch 1200 Error=0.00213\n",
      "Adam: Epoch 1400 Error=0.00200\n",
      "Adam: Epoch 1600 Error=0.00183\n",
      "Adam: Epoch 1800 Error=0.00771\n",
      "Adam: Epoch 2000 Error=0.00162\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_neuralnetwork()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ReLU Activation Function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "class NeuralNetwork():\n",
    "\n",
    "\n",
    "    def __init__(self, n_inputs, n_hiddens_per_layer, n_outputs, activation_function=\"tanh\"):\n",
    "        self.n_inputs = n_inputs\n",
    "        self.n_outputs = n_outputs\n",
    "\n",
    "        # Set self.n_hiddens_per_layer to [] if argument is 0, [], or [0]\n",
    "        if n_hiddens_per_layer == 0 or n_hiddens_per_layer == [] or n_hiddens_per_layer == [0]:\n",
    "            self.n_hiddens_per_layer = []\n",
    "        else:\n",
    "            self.n_hiddens_per_layer = n_hiddens_per_layer\n",
    "\n",
    "        # Initialize weights, by first building list of all weight matrix shapes.\n",
    "        n_in = n_inputs\n",
    "        shapes = []\n",
    "        for nh in self.n_hiddens_per_layer:\n",
    "            shapes.append((n_in + 1, nh))\n",
    "            n_in = nh\n",
    "        shapes.append((n_in + 1, n_outputs))\n",
    "\n",
    "        # self.all_weights:  vector of all weights\n",
    "        # self.Ws: list of weight matrices by layer\n",
    "        self.all_weights, self.Ws = self.make_weights_and_views(shapes)\n",
    "\n",
    "        # Define arrays to hold gradient values.\n",
    "        # One array for each W array with same shape.\n",
    "        self.all_gradients, self.dE_dWs = self.make_weights_and_views(shapes)\n",
    "\n",
    "        self.trained = False\n",
    "        self.total_epochs = 0\n",
    "        self.error_trace = []\n",
    "        self.Xmeans = None\n",
    "        self.Xstds = None\n",
    "        self.Tmeans = None\n",
    "        self.Tstds = None\n",
    "        self.activation_function = activation_function\n",
    "        \n",
    "    def relu(s):\n",
    "        return np.maximum(0, s)\n",
    "        \n",
    "        \n",
    "    def grad_relu(s):\n",
    "        return np.heaviside(s, 1)\n",
    "\n",
    "\n",
    "    def make_weights_and_views(self, shapes):\n",
    "        # vector of all weights built by horizontally stacking flatenned matrices\n",
    "        # for each layer initialized with uniformly-distributed values.\n",
    "        all_weights = np.hstack([np.random.uniform(size=shape).flat / np.sqrt(shape[0])\n",
    "                                 for shape in shapes])\n",
    "        # Build list of views by reshaping corresponding elements from vector of all weights\n",
    "        # into correct shape for each layer.\n",
    "        views = []\n",
    "        start = 0\n",
    "        for shape in shapes:\n",
    "            size =shape[0] * shape[1]\n",
    "            views.append(all_weights[start:start + size].reshape(shape))\n",
    "            start += size\n",
    "        return all_weights, views\n",
    "\n",
    "\n",
    "    # Return string that shows how the constructor was called\n",
    "    def __repr__(self):\n",
    "        return f'NeuralNetwork({self.n_inputs}, {self.n_hiddens_per_layer}, {self.n_outputs})'\n",
    "\n",
    "\n",
    "    # Return string that is more informative to the user about the state of this neural network.\n",
    "    def __str__(self):\n",
    "        if self.trained:\n",
    "            return self.__repr__() + f' trained for {self.total_epochs} epochs, final training error {self.error_trace[-1]}'\n",
    "\n",
    "\n",
    "    def train(self, X, T, n_epochs, learning_rate, method='sgd'):\n",
    "\n",
    "        # Setup standardization parameters\n",
    "        if self.Xmeans is None:\n",
    "            self.Xmeans = X.mean(axis=0)\n",
    "            self.Xstds = X.std(axis=0)\n",
    "            self.Xstds[self.Xstds == 0] = 1  # So we don't divide by zero when standardizing\n",
    "            self.Tmeans = T.mean(axis=0)\n",
    "            self.Tstds = T.std(axis=0)\n",
    "            \n",
    "        # Standardize X and T\n",
    "        X = (X - self.Xmeans) / self.Xstds\n",
    "        T = (T - self.Tmeans) / self.Tstds\n",
    "\n",
    "        # Instantiate Optimizers object by giving it vector of all weights\n",
    "        optimizer = Optimizers(self.all_weights)\n",
    "\n",
    "        # Define function to convert value from error_f into error in original T units.\n",
    "        error_convert_f = lambda err: (np.sqrt(err) * self.Tstds)[0] # to scalar\n",
    "\n",
    "        if method == 'sgd':\n",
    "\n",
    "            error_trace = optimizer.sgd(self.error_f, self.gradient_f,\n",
    "                                        fargs=[X, T], n_epochs=n_epochs,\n",
    "                                        learning_rate=learning_rate,\n",
    "                                        error_convert_f=error_convert_f)\n",
    "\n",
    "        elif method == 'adam':\n",
    "\n",
    "            error_trace = optimizer.adam(self.error_f, self.gradient_f,\n",
    "                                         fargs=[X, T], n_epochs=n_epochs,\n",
    "                                         learning_rate=learning_rate,\n",
    "                                         error_convert_f=error_convert_f)\n",
    "\n",
    "        else:\n",
    "            raise Exception(\"method must be 'sgd' or 'adam'\")\n",
    "        \n",
    "        self.error_trace = error_trace\n",
    "\n",
    "        # Return neural network object to allow applying other methods after training.\n",
    "        #  Example:    Y = nnet.train(X, T, 100, 0.01).use(X)\n",
    "        return self\n",
    "\n",
    "   \n",
    "    def forward_pass(self, X):\n",
    "        '''X assumed already standardized. Output returned as standardized.'''\n",
    "        self.Ys = [X]\n",
    "        for W in self.Ws[:-1]:\n",
    "            \n",
    "            if self.activation_function == 'tanh':\n",
    "                self.Ys.append(np.tanh(self.Ys[-1] @ W[1:, :] + W[0:1, :]))\n",
    "                \n",
    "            if self.activation_function == 'relu':\n",
    "                self.Ys.append(self.relu(self.Ys[-1] @ W[1:, :] + W[0:1, :]))\n",
    "                \n",
    "        last_W = self.Ws[-1]\n",
    "        self.Ys.append(self.Ys[-1] @ last_W[1:, :] + last_W[0:1, :])\n",
    "        return self.Ys\n",
    "\n",
    "    # Function to be minimized by optimizer method, mean squared error\n",
    "    def error_f(self, X, T):\n",
    "        Ys = self.forward_pass(X)\n",
    "        mean_sq_error = np.mean((T - Ys[-1]) ** 2)\n",
    "        return mean_sq_error\n",
    "\n",
    "    # Gradient of function to be minimized for use by optimizer method\n",
    "    def gradient_f(self, X, T):\n",
    "        '''Assumes forward_pass just called with layer outputs in self.Ys.'''\n",
    "        error = T - self.Ys[-1]\n",
    "        n_samples = X.shape[0]\n",
    "        n_outputs = T.shape[1]\n",
    "        delta = - error / (n_samples * n_outputs)\n",
    "        n_layers = len(self.n_hiddens_per_layer) + 1\n",
    "        # Step backwards through the layers to back-propagate the error (delta)\n",
    "        for layeri in range(n_layers - 1, -1, -1):\n",
    "            # gradient of all but bias weights\n",
    "            self.dE_dWs[layeri][1:, :] = self.Ys[layeri].T @ delta\n",
    "            # gradient of just the bias weights\n",
    "            self.dE_dWs[layeri][0:1, :] = np.sum(delta, 0)\n",
    "            # Back-propagate this layer's delta to previous layer\n",
    "            delta = delta @ self.Ws[layeri][1:, :].T * (1 - self.Ys[layeri] ** 2)\n",
    "            \n",
    "        if self.activation_function == 'tanh':\n",
    "            np.tanh(self.all_gradients)\n",
    "            \n",
    "        if self.activation_function == 'relu':\n",
    "            self.grad_relu(self.all_gradients)\n",
    "        \n",
    "        return self.all_gradients\n",
    "\n",
    "    def use(self, X):\n",
    "        X = (X - self.Xmeans) / self.Xstds\n",
    "        Y = self.forward_pass(X)\n",
    "        T = Y[-1] * self.Tstds + self.Tmeans\n",
    "        return T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now for the Experiments!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that your code is working, let's apply it to some interesting data.\n",
    "\n",
    "Read in the `auto-mpg.data` that we have used in lectures.  Let's apply neural networks to predict `mpg` using various neural network architectures, numbers of epochs, and our two activation functions.\n",
    "\n",
    "This time we will partition the data into five parts after randomly rearranging the samples.  We will assign the first partition as the validation set, the second one as the test set, and the remaining parts will be vertically stacked to form the training set, as discussed in lecture.  We can use the RMSE on the validation set to pick the best values of the number of epochs and the network architecture.  Then to report on the RMSE we expect on new data, we will report the test set RMSE."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read in the `auto-mpg.data` using `pandas` and remove all samples that contain missing values.  You should end up with 392 samples.\n",
    "\n",
    "Now randomly reorder the samples.  First run `np.random.seed(42)` to guarantee that we all use the same random ordering of samples.\n",
    "\n",
    "Partition the data into five folds, as shown in lecture.  To do this, complete the following function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "'''    \n",
    "    1. mpg:           continuous\n",
    "    2. cylinders:     multi-valued discrete\n",
    "    3. displacement:  continuous\n",
    "    4. horsepower:    continuous\n",
    "    5. weight:        continuous\n",
    "    6. acceleration:  continuous\n",
    "    7. model year:    multi-valued discrete\n",
    "    8. origin:        multi-valued discrete\n",
    "    9. car name:      string (unique for each instance)\n",
    "'''\n",
    "\n",
    "\n",
    "def partition(X, T, n_folds, random_shuffle=True):\n",
    "    rows = np.arange(X.shape[0])\n",
    "    \n",
    "    if random_shuffle:\n",
    "        np.random.seed(42)\n",
    "        np.random.shuffle(rows)\n",
    "    \n",
    "    X = X[rows, :]\n",
    "    T = T[rows, :]\n",
    "    n_samples = X.shape[0]\n",
    "    n_per_fold = n_samples // n_folds # double-slash = \"floor division\" which rounds down to the nearest number\n",
    "    n_last_fold = n_samples - n_per_fold * (n_folds - 1)  # handles case when n_samples not evenly divided by n_folds\n",
    "\n",
    "    folds = []\n",
    "    start = 0\n",
    "    for foldi in range(n_folds-1):\n",
    "        folds.append( (X[start:start + n_per_fold, :], T[start:start + n_per_fold, :]) )\n",
    "        start += n_per_fold\n",
    "    folds.append( (X[start:, :], T[start:, :]) )   # Changed in notes 07.2\n",
    "\n",
    "\n",
    "    Xvalidate, Tvalidate = folds[0]\n",
    "    Xtest, Ttest = folds[1]\n",
    "    Xtrain, Ttrain = np.vstack([X for (X, _) in folds[2:]]), np.vstack([T for (_, T) in folds[2:]]) # what is this doing? Hint: look at [2:]\n",
    "    \n",
    "    return Xtrain, Ttrain, Xvalidate, Tvalidate, Xtest, Ttest\n",
    "\n",
    "#df = df.sample(frac=1, replace=True, random_state=np.random.seed(42))\n",
    "df = pd.read_csv('auto-mpg.data-original', delim_whitespace=True, na_values=\"NA\", header=None)\n",
    "df = df.dropna()\n",
    "\n",
    "data = df.iloc[:, :-1].values # view everything except the car names (last column)\n",
    "T = data[:, 0:1]  # data[:,0] results in a one-dimensional matrix, data[:,0:1] preserves its two-dimensional nature.\n",
    "X = data[:, 1:] # give me the input variables\n",
    "\n",
    "partition(X, T, 5)\n",
    "\n",
    "names =  ['mpg','cylinders','displacement','horsepower','weight','acceleration','year','origin', 'model']\n",
    "df.columns = names\n",
    "Xnames = names[1:]\n",
    "Tname = names[0]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function named `run_experiment` that uses three nested for loops to try different values of the parameters `n_epochs`, `n_hidden_units_per_layer` and `activation_function` which will just be either `tanh` or `relu`. Don't forget to try `[0]` for one of the values of `n_hidden_units_per_layer` to include a linear model in your tests.  For each set of parameter values, create and train a neural network using the 'adam' optimization method and use the neural network on the training, validation and test sets.  Collect the parameter values and the RMSE for the training, validation, and test set in a list.  When your loops are done, construct a `pandas.DataFrame` from the list of results, for easy printing.  The first five lines might look like:\n",
    "\n",
    "```\n",
    "   epochs        nh    lr act func  RMSE Train  RMSE Val  RMSE Test\n",
    "0    1000       [0]  0.01     tanh    3.356401  3.418705   3.116480\n",
    "1    1000       [0]  0.01     relu    3.354528  3.428324   3.125064\n",
    "2    1000      [20]  0.01     tanh    1.992509  2.355746   2.459506\n",
    "3    1000      [20]  0.01     relu    2.448536  2.026954   2.581707\n",
    "4    1000  [20, 20]  0.01     tanh    1.518916  2.468188   3.118376\n",
    "```\n",
    "Your function must return a `pandas.DataFrame` like this one.\n",
    "\n",
    "Before starting the nested for loops, your `run_experiment` function must first call your `partition` function to form the training, validation and test sets."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An example call of your function would look like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(236, 7) (236, 1) (78, 7) (78, 1) (78, 7) (78, 1)\n",
      "Adam: Epoch 100 Error=3.78158\n",
      "Adam: Epoch 200 Error=3.54286\n",
      "Adam: Epoch 300 Error=3.47537\n",
      "Adam: Epoch 400 Error=3.43532\n",
      "Adam: Epoch 500 Error=3.41365\n",
      "Adam: Epoch 600 Error=3.40252\n",
      "Adam: Epoch 700 Error=3.39700\n",
      "Adam: Epoch 800 Error=3.39434\n",
      "Adam: Epoch 900 Error=3.39309\n",
      "Adam: Epoch 1000 Error=3.39250\n",
      "Adam: Epoch 100 Error=3.67969\n",
      "Adam: Epoch 200 Error=3.53033\n",
      "Adam: Epoch 300 Error=3.45684\n",
      "Adam: Epoch 400 Error=3.42258\n",
      "Adam: Epoch 500 Error=3.40645\n",
      "Adam: Epoch 600 Error=3.39870\n",
      "Adam: Epoch 700 Error=3.39500\n",
      "Adam: Epoch 800 Error=3.39327\n",
      "Adam: Epoch 900 Error=3.39250\n",
      "Adam: Epoch 1000 Error=3.39217\n",
      "Adam: Epoch 100 Error=3.08583\n",
      "Adam: Epoch 200 Error=2.72878\n",
      "Adam: Epoch 300 Error=2.61373\n",
      "Adam: Epoch 400 Error=2.52514\n",
      "Adam: Epoch 500 Error=2.43382\n",
      "Adam: Epoch 600 Error=2.31638\n",
      "Adam: Epoch 700 Error=2.21586\n",
      "Adam: Epoch 800 Error=2.14737\n",
      "Adam: Epoch 900 Error=2.08554\n",
      "Adam: Epoch 1000 Error=2.02402\n",
      "Adam: Epoch 100 Error=4.13949\n",
      "Adam: Epoch 200 Error=4.43232\n",
      "Adam: Epoch 300 Error=3.64511\n",
      "Adam: Epoch 400 Error=4.85588\n",
      "Adam: Epoch 500 Error=4.79406\n",
      "Adam: Epoch 600 Error=4.51883\n",
      "Adam: Epoch 700 Error=4.55433\n",
      "Adam: Epoch 800 Error=5.37580\n",
      "Adam: Epoch 900 Error=4.54167\n",
      "Adam: Epoch 1000 Error=5.00443\n",
      "Adam: Epoch 100 Error=2.77949\n",
      "Adam: Epoch 200 Error=2.11108\n",
      "Adam: Epoch 300 Error=1.76224\n",
      "Adam: Epoch 400 Error=1.46153\n",
      "Adam: Epoch 500 Error=1.25730\n",
      "Adam: Epoch 600 Error=1.10091\n",
      "Adam: Epoch 700 Error=0.97504\n",
      "Adam: Epoch 800 Error=0.84749\n",
      "Adam: Epoch 900 Error=0.69862\n",
      "Adam: Epoch 1000 Error=0.59442\n",
      "Adam: Epoch 100 Error=7.13997\n",
      "Adam: Epoch 200 Error=14.63490\n",
      "Adam: Epoch 300 Error=4.18579\n",
      "Adam: Epoch 400 Error=11.88108\n",
      "Adam: Epoch 500 Error=5.17633\n",
      "Adam: Epoch 600 Error=5.76742\n",
      "Adam: Epoch 700 Error=3.91746\n",
      "Adam: Epoch 800 Error=4.40690\n",
      "Adam: Epoch 900 Error=4.91841\n",
      "Adam: Epoch 1000 Error=4.11937\n",
      "Adam: Epoch 200 Error=3.53889\n",
      "Adam: Epoch 400 Error=3.42736\n",
      "Adam: Epoch 600 Error=3.39955\n",
      "Adam: Epoch 800 Error=3.39335\n",
      "Adam: Epoch 1000 Error=3.39216\n",
      "Adam: Epoch 1200 Error=3.39198\n",
      "Adam: Epoch 1400 Error=3.39196\n",
      "Adam: Epoch 1600 Error=3.39196\n",
      "Adam: Epoch 1800 Error=3.39196\n",
      "Adam: Epoch 2000 Error=3.39196\n",
      "Adam: Epoch 200 Error=3.52839\n",
      "Adam: Epoch 400 Error=3.43475\n",
      "Adam: Epoch 600 Error=3.40653\n",
      "Adam: Epoch 800 Error=3.39713\n",
      "Adam: Epoch 1000 Error=3.39364\n",
      "Adam: Epoch 1200 Error=3.39243\n",
      "Adam: Epoch 1400 Error=3.39207\n",
      "Adam: Epoch 1600 Error=3.39198\n",
      "Adam: Epoch 1800 Error=3.39197\n",
      "Adam: Epoch 2000 Error=3.39196\n",
      "Adam: Epoch 200 Error=2.76126\n",
      "Adam: Epoch 400 Error=2.46254\n",
      "Adam: Epoch 600 Error=2.18558\n",
      "Adam: Epoch 800 Error=2.04329\n",
      "Adam: Epoch 1000 Error=1.96100\n",
      "Adam: Epoch 1200 Error=1.90298\n",
      "Adam: Epoch 1400 Error=1.83695\n",
      "Adam: Epoch 1600 Error=1.76299\n",
      "Adam: Epoch 1800 Error=1.72134\n",
      "Adam: Epoch 2000 Error=1.67990\n",
      "Adam: Epoch 200 Error=3.49393\n",
      "Adam: Epoch 400 Error=3.96623\n",
      "Adam: Epoch 600 Error=4.86596\n",
      "Adam: Epoch 800 Error=5.25320\n",
      "Adam: Epoch 1000 Error=4.24819\n",
      "Adam: Epoch 1200 Error=4.79590\n",
      "Adam: Epoch 1400 Error=5.07634\n",
      "Adam: Epoch 1600 Error=5.16489\n",
      "Adam: Epoch 1800 Error=5.14035\n",
      "Adam: Epoch 2000 Error=5.04855\n",
      "Adam: Epoch 200 Error=1.97852\n",
      "Adam: Epoch 400 Error=1.38332\n",
      "Adam: Epoch 600 Error=1.06088\n",
      "Adam: Epoch 800 Error=0.76713\n",
      "Adam: Epoch 1000 Error=0.61765\n",
      "Adam: Epoch 1200 Error=0.52043\n",
      "Adam: Epoch 1400 Error=0.47815\n",
      "Adam: Epoch 1600 Error=0.39585\n",
      "Adam: Epoch 1800 Error=0.34875\n",
      "Adam: Epoch 2000 Error=0.30778\n",
      "Adam: Epoch 200 Error=4.26692\n",
      "Adam: Epoch 400 Error=3.13022\n",
      "Adam: Epoch 600 Error=4.56205\n",
      "Adam: Epoch 800 Error=3.86776\n",
      "Adam: Epoch 1000 Error=14.44801\n",
      "Adam: Epoch 1200 Error=4.47265\n",
      "Adam: Epoch 1400 Error=3.83574\n",
      "Adam: Epoch 1600 Error=3.54805\n",
      "Adam: Epoch 1800 Error=7.37013\n",
      "Adam: Epoch 2000 Error=3.37071\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>epochs</th>\n",
       "      <th>nh</th>\n",
       "      <th>lr</th>\n",
       "      <th>act func</th>\n",
       "      <th>RMSE Train</th>\n",
       "      <th>RMSE Val</th>\n",
       "      <th>RMSE Test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>[0]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>tanh</td>\n",
       "      <td>3.392493</td>\n",
       "      <td>3.342197</td>\n",
       "      <td>3.139467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>[0]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>relu</td>\n",
       "      <td>3.392163</td>\n",
       "      <td>3.335800</td>\n",
       "      <td>3.138626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>[10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>tanh</td>\n",
       "      <td>2.023484</td>\n",
       "      <td>2.529690</td>\n",
       "      <td>3.012040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>[10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>relu</td>\n",
       "      <td>5.004523</td>\n",
       "      <td>4.611447</td>\n",
       "      <td>4.732527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>[100, 10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>tanh</td>\n",
       "      <td>0.572793</td>\n",
       "      <td>3.457299</td>\n",
       "      <td>3.371508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000</td>\n",
       "      <td>[100, 10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>relu</td>\n",
       "      <td>4.165823</td>\n",
       "      <td>4.232261</td>\n",
       "      <td>4.773075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2000</td>\n",
       "      <td>[0]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>tanh</td>\n",
       "      <td>3.391963</td>\n",
       "      <td>3.327554</td>\n",
       "      <td>3.138830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2000</td>\n",
       "      <td>[0]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>relu</td>\n",
       "      <td>3.391964</td>\n",
       "      <td>3.327876</td>\n",
       "      <td>3.138808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2000</td>\n",
       "      <td>[10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>tanh</td>\n",
       "      <td>1.679677</td>\n",
       "      <td>3.191609</td>\n",
       "      <td>3.329430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2000</td>\n",
       "      <td>[10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>relu</td>\n",
       "      <td>5.048264</td>\n",
       "      <td>4.729531</td>\n",
       "      <td>5.049052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2000</td>\n",
       "      <td>[100, 10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>tanh</td>\n",
       "      <td>0.307531</td>\n",
       "      <td>3.297128</td>\n",
       "      <td>3.862628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2000</td>\n",
       "      <td>[100, 10]</td>\n",
       "      <td>0.01</td>\n",
       "      <td>relu</td>\n",
       "      <td>3.371412</td>\n",
       "      <td>3.276538</td>\n",
       "      <td>3.208718</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    epochs         nh    lr act func  RMSE Train  RMSE Val  RMSE Test\n",
       "0     1000        [0]  0.01     tanh    3.392493  3.342197   3.139467\n",
       "1     1000        [0]  0.01     relu    3.392163  3.335800   3.138626\n",
       "2     1000       [10]  0.01     tanh    2.023484  2.529690   3.012040\n",
       "3     1000       [10]  0.01     relu    5.004523  4.611447   4.732527\n",
       "4     1000  [100, 10]  0.01     tanh    0.572793  3.457299   3.371508\n",
       "5     1000  [100, 10]  0.01     relu    4.165823  4.232261   4.773075\n",
       "6     2000        [0]  0.01     tanh    3.391963  3.327554   3.138830\n",
       "7     2000        [0]  0.01     relu    3.391964  3.327876   3.138808\n",
       "8     2000       [10]  0.01     tanh    1.679677  3.191609   3.329430\n",
       "9     2000       [10]  0.01     relu    5.048264  4.729531   5.049052\n",
       "10    2000  [100, 10]  0.01     tanh    0.307531  3.297128   3.862628\n",
       "11    2000  [100, 10]  0.01     relu    3.371412  3.276538   3.208718"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "class Optimizers():\n",
    "\n",
    "    def __init__(self, all_weights):\n",
    "        '''all_weights is a vector of all of a neural networks weights concatenated into a one-dimensional vector'''\n",
    "        \n",
    "        self.all_weights = all_weights\n",
    "\n",
    "        # The following initializations are only used by adam.\n",
    "        # Only initializing mt, vt, beta1t and beta2t here allows multiple calls to adam to handle training\n",
    "        # with multiple subsets (batches) of training data.\n",
    "        self.mt = np.zeros_like(all_weights)\n",
    "        self.vt = np.zeros_like(all_weights)\n",
    "        self.beta1 = 0.9\n",
    "        self.beta2 = 0.999\n",
    "        self.beta1t = 1  # was self.beta1\n",
    "        self.beta2t = 1  # was self.beta2\n",
    "\n",
    "        \n",
    "    def sgd(self, error_f, gradient_f, fargs=[], n_epochs=100, learning_rate=0.001, error_convert_f=None):\n",
    "        '''\n",
    "error_f: function that requires X and T as arguments (given in fargs) and returns mean squared error.\n",
    "gradient_f: function that requires X and T as arguments (in fargs) and returns gradient of mean squared error\n",
    "            with respect to each weight.\n",
    "error_convert_f: function that converts the standardized error from error_f to original T units.\n",
    "        '''\n",
    "\n",
    "        error_trace = []\n",
    "        epochs_per_print = n_epochs // 10\n",
    "\n",
    "        for epoch in range(n_epochs):\n",
    "\n",
    "            error = error_f(*fargs)\n",
    "            grad = gradient_f(*fargs)\n",
    "\n",
    "            # Update all weights using -= to modify their values in-place.\n",
    "            self.all_weights -= learning_rate * grad\n",
    "\n",
    "            if error_convert_f:\n",
    "                error = error_convert_f(error)\n",
    "            error_trace.append(error)\n",
    "\n",
    "            if (epoch + 1) % max(1, epochs_per_print) == 0:\n",
    "                print(f'sgd: Epoch {epoch+1:d} Error={error:.5f}')\n",
    "\n",
    "        return error_trace\n",
    "\n",
    "    def adam(self, error_f, gradient_f, fargs=[], n_epochs=100, learning_rate=0.001, error_convert_f=None):\n",
    "        '''\n",
    "error_f: function that requires X and T as arguments (given in fargs) and returns mean squared error.\n",
    "gradient_f: function that requires X and T as arguments (in fargs) and returns gradient of mean squared error\n",
    "            with respect to each weight.\n",
    "error_convert_f: function that converts the standardized error from error_f to original T units.\n",
    "        '''\n",
    "        \n",
    "        # adam = Adaptive Moment Estimation\n",
    "\n",
    "        alpha = learning_rate  # learning rate called alpha in original paper on adam\n",
    "        epsilon = 1e-8\n",
    "        error_trace = []\n",
    "        epochs_per_print = n_epochs // 10\n",
    "\n",
    "        for epoch in range(n_epochs):\n",
    "\n",
    "            error = error_f(*fargs)\n",
    "            grad = gradient_f(*fargs)\n",
    "\n",
    "            # Finish Adam implementation here by updating\n",
    "            #   self.mt\n",
    "            #   self.vt\n",
    "            #   self.beta1t\n",
    "            #   self.beta2t\n",
    "            # and updating values of self.all_weights\n",
    "            \n",
    "            # mt = beta1 * mt + (1 - beta1) * gradE_W\n",
    "            gradE_W = learning_rate * grad\n",
    "            self.mt = self.beta1 * self.mt + (1 - self.beta1) * (gradE_W)\n",
    "            \n",
    "            # vt = beta2 * vt + (1 - beta2) * np.square(gradE_W)\n",
    "            self.vt = self.beta2 * self.vt + (1 - self.beta2) * np.square(gradE_W)\n",
    "            \n",
    "            # beta1t *= beta1\n",
    "            self.beta1t *= self.beta1\n",
    "            \n",
    "            # beta2t *= beta2\n",
    "            self.beta2t *= self.beta2\n",
    "            \n",
    "            # mhat = mt / (1 - beta1)\n",
    "            mhat = self.mt / (1 - self.beta1t)\n",
    "            \n",
    "            # vhat = vt / (1 - beta2)\n",
    "            vhat = self.vt / (1 - self.beta2t)\n",
    "            \n",
    "            # w -= rho * mhat / (np.sqrt(vhat) + epsilon)\n",
    "            # rho = learning rate?\n",
    "            self.all_weights -= learning_rate * mhat / (np.sqrt(vhat) + epsilon)\n",
    "        \n",
    "\n",
    "            if error_convert_f:\n",
    "                error = error_convert_f(error)\n",
    "            error_trace.append(error)\n",
    "\n",
    "            if (epoch + 1) % max(1, epochs_per_print) == 0:\n",
    "                print(f'Adam: Epoch {epoch+1:d} Error={error:.5f}')\n",
    "\n",
    "        return error_trace\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "class NeuralNetwork():\n",
    "\n",
    "\n",
    "    def __init__(self, n_inputs, n_hiddens_per_layer, n_outputs, activation_function=\"tanh\"):\n",
    "        self.n_inputs = n_inputs\n",
    "        self.n_outputs = n_outputs\n",
    "\n",
    "        # Set self.n_hiddens_per_layer to [] if argument is 0, [], or [0]\n",
    "        if n_hiddens_per_layer == 0 or n_hiddens_per_layer == [] or n_hiddens_per_layer == [0]:\n",
    "            self.n_hiddens_per_layer = []\n",
    "        else:\n",
    "            self.n_hiddens_per_layer = n_hiddens_per_layer\n",
    "\n",
    "        # Initialize weights, by first building list of all weight matrix shapes.\n",
    "        n_in = n_inputs\n",
    "        shapes = []\n",
    "        for nh in self.n_hiddens_per_layer:\n",
    "            shapes.append((n_in + 1, nh))\n",
    "            n_in = nh\n",
    "        shapes.append((n_in + 1, n_outputs))\n",
    "\n",
    "        # self.all_weights:  vector of all weights\n",
    "        # self.Ws: list of weight matrices by layer\n",
    "        self.all_weights, self.Ws = self.make_weights_and_views(shapes)\n",
    "\n",
    "        # Define arrays to hold gradient values.\n",
    "        # One array for each W array with same shape.\n",
    "        self.all_gradients, self.dE_dWs = self.make_weights_and_views(shapes)\n",
    "\n",
    "        self.trained = False\n",
    "        self.total_epochs = 0\n",
    "        self.error_trace = []\n",
    "        self.Xmeans = None\n",
    "        self.Xstds = None\n",
    "        self.Tmeans = None\n",
    "        self.Tstds = None\n",
    "        self.activation_function = activation_function\n",
    "        \n",
    "    def relu(self,s):\n",
    "        return np.maximum(0, s)\n",
    "        \n",
    "        \n",
    "    def grad_relu(self,s):\n",
    "        return np.heaviside(s, 1)\n",
    "\n",
    "\n",
    "    def make_weights_and_views(self, shapes):\n",
    "        # vector of all weights built by horizontally stacking flatenned matrices\n",
    "        # for each layer initialized with uniformly-distributed values.\n",
    "        all_weights = np.hstack([np.random.uniform(size=shape).flat / np.sqrt(shape[0])\n",
    "                                 for shape in shapes])\n",
    "        # Build list of views by reshaping corresponding elements from vector of all weights\n",
    "        # into correct shape for each layer.\n",
    "        views = []\n",
    "        start = 0\n",
    "        for shape in shapes:\n",
    "            size =shape[0] * shape[1]\n",
    "            views.append(all_weights[start:start + size].reshape(shape))\n",
    "            start += size\n",
    "        return all_weights, views\n",
    "\n",
    "\n",
    "    # Return string that shows how the constructor was called\n",
    "    def __repr__(self):\n",
    "        return f'NeuralNetwork({self.n_inputs}, {self.n_hiddens_per_layer}, {self.n_outputs})'\n",
    "\n",
    "\n",
    "    # Return string that is more informative to the user about the state of this neural network.\n",
    "    def __str__(self):\n",
    "        if self.trained:\n",
    "            return self.__repr__() + f' trained for {self.total_epochs} epochs, final training error {self.error_trace[-1]}'\n",
    "\n",
    "\n",
    "    def train(self, X, T, n_epochs, learning_rate, method='sgd'):\n",
    "\n",
    "        # Setup standardization parameters\n",
    "        if self.Xmeans is None:\n",
    "            self.Xmeans = X.mean(axis=0)\n",
    "            self.Xstds = X.std(axis=0)\n",
    "            self.Xstds[self.Xstds == 0] = 1  # So we don't divide by zero when standardizing\n",
    "            self.Tmeans = T.mean(axis=0)\n",
    "            self.Tstds = T.std(axis=0)\n",
    "            \n",
    "        # Standardize X and T\n",
    "        X = (X - self.Xmeans) / self.Xstds\n",
    "        T = (T - self.Tmeans) / self.Tstds\n",
    "\n",
    "        # Instantiate Optimizers object by giving it vector of all weights\n",
    "        optimizer = Optimizers(self.all_weights)\n",
    "\n",
    "        # Define function to convert value from error_f into error in original T units.\n",
    "        error_convert_f = lambda err: (np.sqrt(err) * self.Tstds)[0] # to scalar\n",
    "\n",
    "        if method == 'sgd':\n",
    "\n",
    "            error_trace = optimizer.sgd(self.error_f, self.gradient_f,\n",
    "                                        fargs=[X, T], n_epochs=n_epochs,\n",
    "                                        learning_rate=learning_rate,\n",
    "                                        error_convert_f=error_convert_f)\n",
    "\n",
    "        elif method == 'adam':\n",
    "\n",
    "            error_trace = optimizer.adam(self.error_f, self.gradient_f,\n",
    "                                         fargs=[X, T], n_epochs=n_epochs,\n",
    "                                         learning_rate=learning_rate,\n",
    "                                         error_convert_f=error_convert_f)\n",
    "\n",
    "        else:\n",
    "            raise Exception(\"method must be 'sgd' or 'adam'\")\n",
    "        \n",
    "        self.error_trace = error_trace\n",
    "\n",
    "        # Return neural network object to allow applying other methods after training.\n",
    "        #  Example:    Y = nnet.train(X, T, 100, 0.01).use(X)\n",
    "        return self\n",
    "\n",
    "   \n",
    "    def forward_pass(self, X):\n",
    "        '''X assumed already standardized. Output returned as standardized.'''\n",
    "        self.Ys = [X]\n",
    "        for W in self.Ws[:-1]:\n",
    "            \n",
    "            \n",
    "            \n",
    "            \n",
    "            \n",
    "            if self.activation_function == 'tanh':\n",
    "                self.Ys.append(np.tanh(self.Ys[-1] @ W[1:, :] + W[0:1, :]))\n",
    "                \n",
    "            if self.activation_function == 'relu':\n",
    "                self.Ys.append(self.relu(self.Ys[-1] @ W[1:, :] + W[0:1, :]))\n",
    "                \n",
    "                \n",
    "                \n",
    "                \n",
    "                \n",
    "        last_W = self.Ws[-1]\n",
    "        self.Ys.append(self.Ys[-1] @ last_W[1:, :] + last_W[0:1, :])\n",
    "        return self.Ys\n",
    "\n",
    "    # Function to be minimized by optimizer method, mean squared error\n",
    "    def error_f(self, X, T):\n",
    "        Ys = self.forward_pass(X)\n",
    "        mean_sq_error = np.mean((T - Ys[-1]) ** 2)\n",
    "        return mean_sq_error\n",
    "\n",
    "    # Gradient of function to be minimized for use by optimizer method\n",
    "    def gradient_f(self, X, T):\n",
    "        '''Assumes forward_pass just called with layer outputs in self.Ys.'''\n",
    "        error = T - self.Ys[-1]\n",
    "        n_samples = X.shape[0]\n",
    "        n_outputs = T.shape[1]\n",
    "        delta = - error / (n_samples * n_outputs)\n",
    "        n_layers = len(self.n_hiddens_per_layer) + 1\n",
    "        # Step backwards through the layers to back-propagate the error (delta)\n",
    "        for layeri in range(n_layers - 1, -1, -1):\n",
    "            # gradient of all but bias weights\n",
    "            self.dE_dWs[layeri][1:, :] = self.Ys[layeri].T @ delta\n",
    "            # gradient of just the bias weights\n",
    "            self.dE_dWs[layeri][0:1, :] = np.sum(delta, 0)\n",
    "            # Back-propagate this layer's delta to previous layer\n",
    "            delta = delta @ self.Ws[layeri][1:, :].T * (1 - self.Ys[layeri] ** 2)\n",
    "            \n",
    "\n",
    "            if self.activation_function == 'tanh':\n",
    "                np.tanh(self.all_gradients)\n",
    "\n",
    "            if self.activation_function == 'relu':\n",
    "                self.grad_relu(self.all_gradients)\n",
    "\n",
    "            \n",
    "        \n",
    "        return self.all_gradients\n",
    "\n",
    "    def use(self, X):\n",
    "        X = (X - self.Xmeans) / self.Xstds\n",
    "        Y = self.forward_pass(X)\n",
    "        T = Y[-1] * self.Tstds + self.Tmeans\n",
    "        return T\n",
    "        \n",
    "    \n",
    "    \n",
    "    \n",
    "def rmse(A, B):\n",
    "    return np.sqrt(np.mean((A - B)**2)) \n",
    "\n",
    "\n",
    "\n",
    "def run_experiment(X, T, n_folds, n_epochs_choices, n_hidden_units_per_layer_choices, activation_function_choices):\n",
    "    Xtrain, Ttrain, Xvalidate, Tvalidate, Xtest, Ttest = partition(X, T, n_folds)\n",
    "    results = []\n",
    "    for rate in [0.01]: # learning rates\n",
    "        for epochs in n_epochs_choices: # Training durations\n",
    "            for nh in n_hidden_units_per_layer_choices: # Layer sizes\n",
    "                for method in activation_function_choices: # Optimizers\n",
    "                    # instantiate and train\n",
    "                    nnet = NeuralNetwork(Xtrain.shape[1], nh, Ttrain.shape[1], activation_function=method)\n",
    "                    nnet.train(Xtrain, Ttrain, epochs, rate, 'adam')\n",
    "                    # append the results of each experiment\n",
    "                    results.append([epochs, nh, rate, method,\n",
    "                                    rmse(Ttrain, nnet.use(Xtrain)),\n",
    "                                    rmse(Tvalidate, nnet.use(Xvalidate)),\n",
    "                                    rmse(Ttest, nnet.use(Xtest))])\n",
    "                    # load these into a dataframe and give it some column titles\n",
    "                    df = pd.DataFrame(results, columns=('epochs', 'nh', 'lr', 'act func', 'RMSE Train',\n",
    "                                                        'RMSE Val', 'RMSE Test'))       \n",
    "    return df\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "df = pd.read_csv('auto-mpg.data-original', delim_whitespace=True, na_values=\"NA\", header=None)\n",
    "df = df.dropna()\n",
    "\n",
    "data = df.iloc[:, :-1].values # view everything except the car names (last column)\n",
    "T = data[:, 0:1]  # data[:,0] results in a one-dimensional matrix, data[:,0:1] preserves its two-dimensional nature.\n",
    "X = data[:, 1:] # give me the input variables\n",
    "\n",
    "pts = 20\n",
    "\n",
    "np.random.seed(42)\n",
    "\n",
    "result_df = run_experiment(X, T, n_folds=5, \n",
    "                           n_epochs_choices=[1000, 2000],\n",
    "                           n_hidden_units_per_layer_choices=[[0], [10], [100, 10]],\n",
    "                           activation_function_choices=['tanh', 'relu'])\n",
    "\n",
    "\n",
    "result_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the lowest value of `RMSE Val` in your table and report the `RMSE Test` and the parameter values that produced this.  This is your expected error in predicted miles per gallon.  Discuss how good this prediction is."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the RMSE values for training, validation and test sets versus the combined parameter values of number of epochs and network architecture.  Make one plot for `tanh` as the activation function and a second one for `relu`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Describe at least three different observations you make about these plots.  What do you find interesting?\n",
    "\n",
    "1. ...\n",
    "2. ...\n",
    "3. ..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grading and Check-in\n",
    "\n",
    "You and your partner will score of 70 points if your functions are defined correctly. You can test this grading process yourself by downloading [A2grader.zip](https://www.cs.colostate.edu/~cs445/notebooks/A2grader.zip) and extract `A2grader.py` parallel to this notebook.  We recommend keeping this notebook and the grader script in a dedicated folder with *just those two files.* Run the code in the in the following cell to see an example grading run.  If your functions are defined correctly, you should see a score of 70/70.  The remaining 30 points will be based on 1) other testing and the results you obtain, and 2) your discussions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================= Code Execution =======================\n",
      "\n",
      "Extracting python code from notebook named 'A2.5 Multilayer Neural Networks for Nonlinear Regression.ipynb' and storing in notebookcode.py\n",
      "Removing all statements that are not function or class defs or import statements.\n",
      "\n",
      "Testing\n",
      "  w = np.array([0.0])\n",
      "  def cubic(wmin):\n",
      "      return (w[0] - wmin) ** 3 + (w[0] - wmin) ** 2\n",
      "  def grad_cubic(wmin):\n",
      "      return 3 * (w[0] - wmin) ** 2 + 2 * (w[0] - wmin)\n",
      "  wmin = 0.5\n",
      "  opt = Optimizers(w)\n",
      "  errors_sgd = opt.sgd(cubic, grad_cubic, [wmin], 100, 0.01)\n",
      "\n",
      "sgd: Epoch 10 Error=0.11889\n",
      "sgd: Epoch 20 Error=0.11092\n",
      "sgd: Epoch 30 Error=0.10176\n",
      "sgd: Epoch 40 Error=0.09162\n",
      "sgd: Epoch 50 Error=0.08081\n",
      "sgd: Epoch 60 Error=0.06972\n",
      "sgd: Epoch 70 Error=0.05879\n",
      "sgd: Epoch 80 Error=0.04844\n",
      "sgd: Epoch 90 Error=0.03901\n",
      "sgd: Epoch 100 Error=0.03072\n",
      "\n",
      "--- 10/10 points. Returned correct value.\n",
      "\n",
      "Testing\n",
      "  w = np.array([0.0])\n",
      "  def cubic(wmin):\n",
      "      return (w[0] - wmin) ** 3 + (w[0] - wmin) ** 2\n",
      "  def grad_cubic(wmin):\n",
      "      return 3 * (w[0] - wmin) ** 2 + 2 * (w[0] - wmin)\n",
      "  wmin = 0.5\n",
      "  opt = Optimizers(w)\n",
      "  errors_adam = opt.adam(cubic, grad_cubic, [wmin], 100, 0.01)\n",
      "\n",
      "Adam: Epoch 10 Error=0.09899\n",
      "Adam: Epoch 20 Error=0.06515\n",
      "Adam: Epoch 30 Error=0.03305\n",
      "Adam: Epoch 40 Error=0.01054\n",
      "Adam: Epoch 50 Error=0.00110\n",
      "Adam: Epoch 60 Error=0.00009\n",
      "Adam: Epoch 70 Error=0.00044\n",
      "Adam: Epoch 80 Error=0.00017\n",
      "Adam: Epoch 90 Error=0.00001\n",
      "Adam: Epoch 100 Error=0.00001\n",
      "\n",
      "--- 10/10 points. Returned correct value.\n",
      "\n",
      "Testing\n",
      "    np.random.seed(42)\n",
      "    \n",
      "    nnet = NeuralNetwork(2, [10], 1)\n",
      "    X = np.arange(40).reshape(20, 2)\n",
      "    T = X[:, 0:1] * X[:, 1:]\n",
      "    nnet.train(X, T, 1000, 0.01, method='adam')\n",
      "\n",
      "Adam: Epoch 100 Error=62.64731\n",
      "Adam: Epoch 200 Error=35.83298\n",
      "Adam: Epoch 300 Error=24.70320\n",
      "Adam: Epoch 400 Error=18.70194\n",
      "Adam: Epoch 500 Error=14.78869\n",
      "Adam: Epoch 600 Error=11.85687\n",
      "Adam: Epoch 700 Error=9.50901\n",
      "Adam: Epoch 800 Error=7.55259\n",
      "Adam: Epoch 900 Error=5.90165\n",
      "Adam: Epoch 1000 Error=4.54391\n",
      "\n",
      "--- 20/20 points. Returned correct value.\n",
      "\n",
      "Testing\n",
      "    np.random.seed(42)\n",
      "    \n",
      "    # Using X and T from previous test\n",
      "    a, b, c, d, e, f = partition(X, T, 3)\n",
      "\n",
      "(8, 2) (8, 1) (6, 2) (6, 1) (6, 2) (6, 1)\n",
      "\n",
      "--- 10/10 points. Returned correct values.\n",
      "\n",
      "Testing\n",
      "    np.random.seed(42)\n",
      "\n",
      "    result = run_experiment(X, T, 3,\n",
      "                            n_epochs_choices=[10, 20],\n",
      "                            n_hidden_units_per_layer_choices=[[0], [10]],\n",
      "                            activation_function_choices=['tanh', 'relu'])\n",
      "\n",
      "    first_test_rmse = result.iloc[0]['RMSE Test']\n",
      "\n",
      "\n",
      "--- 0/20 points. run_experiment raised the exception\n",
      "\n",
      "run_experiment() got an unexpected keyword argument 'n_epochs_choices'\n",
      "\n",
      "======================================================================\n",
      "A2 Execution Grade is 50 / 70\n",
      "======================================================================\n",
      "\n",
      " __ / 30 Discussion of at least three observations about\n",
      "your results.  Please be detailed enough that your conclusions are clear.\n",
      "\n",
      "======================================================================\n",
      "A2 FINAL GRADE is  _  / 100\n",
      "======================================================================\n",
      "\n",
      "Extra Credit:\n",
      "Add the Swish activation function as a third choice in your train function in your NeuralNetwork class. A little googling will find definitions of it and its gradient.\n",
      "\n",
      "Use your run_experiment function to compare results for all three activation functions. Discuss the results.\n",
      "\n",
      "A2 EXTRA CREDIT is 0 / 1\n"
     ]
    }
   ],
   "source": [
    "%run -i A2grader.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Name this notebook as `Lastname1-Lastname2-A2.ipynb`| with Lastname1 being then name of the last name of the person who is turning in the notebook.\n",
    "\n",
    "A different but similar grading script will be used to grade your checked-in notebook.  It will include different tests."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extra Credit: 5 point\n",
    "\n",
    "Add the Swish activation function as a third choice in your `train` function in your `NeuralNetwork` class.\n",
    "A little googling will find definitions of it and its gradient.  Start with [this article](https://www.machinecurve.com/index.php/2019/05/30/why-swish-could-perform-better-than-relu/#todays-activation-functions).\n",
    "\n",
    "Use your `run_experiment` function to compare results for all three activation functions.  Discuss the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
